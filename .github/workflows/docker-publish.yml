# Github Actions Workflow file that builds and pushes the docker images.
name: payroll-h2
env:
  IMAGE_NAME: payroll-h2
  DOCKERHUB_TAG: "${{ secrets.DOCKERHUB_USERNAME }}/payroll-h2"
  DOCKERFILE_PATH: .
  VERSION: latest

on:
  push:
    branches: [ "dev**", "staging**", "main**", "prod**", "uat**", "preprod**" ]
    paths: [ "/**", "!**/README.md", "!**/LICENSE", ".github/workflows/docker-publish.yml"]

  release:
    types: [ created ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}"
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Build, unit tests and integration tests
        run: |
          chmod +x mvnw
          ./mvnw install
      - uses: anchore/scan-action/download-grype@v3
        id: grype
      - run: ${{steps.grype.outputs.cmd}} dir:.

  docker-publish:
    name: Package and Publish
    if: ${{ github.event_name }} == 'release'
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Get the release version
        #id: get_version
        run: |
            if [ ${{ github.event_name }} == 'release' ]; then       
                echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV
            else
                echo "RELEASE_VERSION=${{ env.VERSION }}" >> $GITHUB_ENV
            fi
        
      - name: Build container image
        run: |
          chmod +x mvnw
          ./mvnw spring-boot:build-image \
             -Dspring-boot.build-image.imageName=${{ env.DOCKERHUB_TAG }}:${{ env.RELEASE_VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: "${{ env.DOCKERHUB_TAG }}:${{ env.RELEASE_VERSION }}"
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true    
          
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
     
      - name: Login to DockerHub
        uses: docker/login-action@3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        id: docker_build
        uses: docker/build-push-action@5
        with:
          context: "${{ env.DOCKERFILE_PATH }}"
          push: true
          tags: "${{ env.DOCKERHUB_TAG }}:${{ env.RELEASE_VERSION }}"


